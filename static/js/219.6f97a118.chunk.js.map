{"version":3,"file":"static/js/219.6f97a118.chunk.js","mappings":"mQAEaA,EAAWC,EAAAA,GAAAA,IAAH,0CAIRC,EAAWD,EAAAA,GAAAA,GAAH,kIAQRE,EAAWF,EAAAA,GAAAA,GAAH,gN,SCsCrB,EA9Ca,WACX,OAAwBG,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,IAdAE,EAAAA,EAAAA,YAAU,WACRH,GAAW,IACXI,EAAAA,EAAAA,IAAYH,GACTI,MAAK,SAAAC,GACJN,GAAW,GACXF,EAAQQ,EAAKT,KACd,IACAU,OAAM,SAAAC,GACLR,GAAW,GACXS,QAAQC,IAAR,UAAeF,EAAMG,KAArB,aAA8BH,EAAMI,UACpCC,EAAAA,GAAAA,MAAY,iCACb,GACJ,GAAE,CAACZ,IAECJ,EAEL,OACE,UAACL,EAAD,YACE,SAACE,EAAD,UACGG,EAAKiB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcL,EAArB,EAAqBA,KAAMM,EAA3B,EAA2BA,UAA3B,OACR,UAACtB,EAAD,YACE,gBACEuB,IACEF,EAAY,UAzBV,mCAyBU,OACKA,GACb,yHAENG,IAAKR,EACLS,MAAO,OAET,uBAAIT,KACJ,uCAAeM,OAXFF,EADP,MAgBK,IAAhBlB,EAAKwB,SAAiBtB,IAAW,2DAGvC,C,mMChDDuB,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IACMC,EAAS,IAAIC,gBAAgB,CACjCC,QAFc,qCAKHC,EAAW,mCAAG,oGACFJ,EAAAA,EAAAA,IAAA,6BAAgCC,IAD9B,cACnBI,EADmB,yBAElBA,EAASrB,MAFS,2CAAH,qDAKXsB,EAAY,mCAAG,WAAM3B,GAAN,uFACHqB,EAAAA,EAAAA,IAAA,gBAAmBrB,EAAnB,YAA8BsB,IAD3B,cACpBI,EADoB,yBAEnBA,EAASrB,MAFU,2CAAH,sDAKZuB,EAAe,mCAAG,WAAMC,GAAN,uFACNR,EAAAA,EAAAA,IAAA,uBAA0BC,EAA1B,kBAA0CO,IADpC,cACvBH,EADuB,yBAEtBA,EAASrB,MAFa,2CAAH,sDAKfF,EAAW,mCAAG,WAAMH,GAAN,uFACFqB,EAAAA,EAAAA,IAAA,gBAAmBrB,EAAnB,oBAAsCsB,IADpC,cACnBI,EADmB,yBAElBA,EAASrB,MAFS,2CAAH,sDAKXyB,EAAU,mCAAG,WAAM9B,GAAN,uFACDqB,EAAAA,EAAAA,IAAA,gBAAmBrB,EAAnB,oBAAsCsB,IADrC,cAClBI,EADkB,yBAEjBA,EAASrB,MAFQ,2CAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.js","getMoviesApi.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ListWrap = styled.div`\n  padding: 16px;\n`;\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: baseline;\n  gap: 16px;\n`;\n\nexport const CastItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  width: 160px;\n  gap: 10px;\n\n  p {\n    font-size: 14px;\n    text-align: center;\n  }\n`;\n","import toast from 'react-hot-toast';\nimport { getCastById } from 'getMoviesApi';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ListWrap, CastList, CastItem } from './Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n  const IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\n  useEffect(() => {\n    setLoading(true);\n    getCastById(movieId)\n      .then(data => {\n        setLoading(false);\n        setCast(data.cast);\n      })\n      .catch(error => {\n        setLoading(false);\n        console.log(`${error.name}: ${error.message}`);\n        toast.error('Sorry, something went wrong...');\n      });\n  }, [movieId]);\n\n  if (!cast) return;\n\n  return (\n    <ListWrap>\n      <CastList>\n        {cast.map(({ id, profile_path, name, character }) => (\n          <CastItem key={id}>\n            <img\n              src={\n                profile_path\n                  ? `${IMG_URL}${profile_path}`\n                  : 'https://upload.wikimedia.org/wikipedia/commons/thumb/6/65/No-Image-Placeholder.svg/1200px-No-Image-Placeholder.svg.png'\n              }\n              alt={name}\n              width={120}\n            />\n            <b>{name}</b>\n            <p>Character: {character}</p>\n          </CastItem>\n        ))}\n      </CastList>\n      {cast.length === 0 && !loading && <p>No cast found for this movie.</p>}\n    </ListWrap>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '12c5bb7038d66843aec293c82a0d8d17';\nconst params = new URLSearchParams({\n  api_key: API_KEY,\n});\n\nexport const getTrending = async () => {\n  const response = await axios.get(`trending/movie/day?${params}`);\n  return response.data;\n};\n\nexport const getMovieById = async movieId => {\n  const response = await axios.get(`movie/${movieId}?${params}`);\n  return response.data;\n};\n\nexport const getSearchMovies = async query => {\n  const response = await axios.get(`search/movie?${params}&query=${query}`);\n  return response.data;\n};\n\nexport const getCastById = async movieId => {\n  const response = await axios.get(`movie/${movieId}/credits?${params}`);\n  return response.data;\n};\n\nexport const getReviews = async movieId => {\n  const response = await axios.get(`movie/${movieId}/reviews?${params}`);\n  return response.data;\n};\n"],"names":["ListWrap","styled","CastList","CastItem","useState","cast","setCast","loading","setLoading","movieId","useParams","useEffect","getCastById","then","data","catch","error","console","log","name","message","toast","map","id","profile_path","character","src","alt","width","length","axios","params","URLSearchParams","api_key","getTrending","response","getMovieById","getSearchMovies","query","getReviews"],"sourceRoot":""}